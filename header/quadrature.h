// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------------ //
// quadrature_encoder //
// ------------------ //

#define quadrature_encoder_wrap_target 15
#define quadrature_encoder_wrap 28

static const uint16_t quadrature_encoder_program_instructions[] = {
    0x000f, //  0: jmp    15                         
    0x000e, //  1: jmp    14                         
    0x001a, //  2: jmp    26                         
    0x000f, //  3: jmp    15                         
    0x001a, //  4: jmp    26                         
    0x000f, //  5: jmp    15                         
    0x000f, //  6: jmp    15                         
    0x000e, //  7: jmp    14                         
    0x000e, //  8: jmp    14                         
    0x000f, //  9: jmp    15                         
    0x000f, // 10: jmp    15                         
    0x001a, // 11: jmp    26                         
    0x000f, // 12: jmp    15                         
    0x001a, // 13: jmp    26                         
    0x008f, // 14: jmp    y--, 15                    
            //     .wrap_target
    0xe020, // 15: set    x, 0                       
    0x8080, // 16: pull   noblock                    
    0xa027, // 17: mov    x, osr                     
    0xa0e6, // 18: mov    osr, isr                   
    0x0036, // 19: jmp    !x, 22                     
    0xa0c2, // 20: mov    isr, y                     
    0x8020, // 21: push   block                      
    0xa0c3, // 22: mov    isr, null                  
    0x40e2, // 23: in     osr, 2                     
    0x4002, // 24: in     pins, 2                    
    0xa0a6, // 25: mov    pc, isr                    
    0xa02a, // 26: mov    x, !y                      
    0x005c, // 27: jmp    x--, 28                    
    0xa049, // 28: mov    y, !x                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program quadrature_encoder_program = {
    .instructions = quadrature_encoder_program_instructions,
    .length = 29,
    .origin = 0,
};

static inline pio_sm_config quadrature_encoder_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + quadrature_encoder_wrap_target, offset + quadrature_encoder_wrap);
    return c;
}

#include "hardware/clocks.h"
#include "hardware/gpio.h"

#define ENCODER_PIO pio0
#define ENCODER_PIO_SM 0

/*!
 *
 * @param pio
 * @param sm
 * @param pin
 * @param max_step_rate
 */
static inline void quadrature_encoder_program_init(PIO pio, uint8_t sm, uint8_t pin, uint max_step_rate) {
	uint offset = pio_add_program(pio, &quadrature_encoder_program);
	pio_sm_set_consecutive_pindirs(pio, sm, pin, 2u, false);
	gpio_set_pulls(pin, true, false);
	gpio_set_function(pin, (pio == pio0) ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
	gpio_set_pulls(pin + 1u, true, false);
	gpio_set_function(pin + 1u, (pio == pio0) ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
	pio_sm_config c = quadrature_encoder_program_get_default_config(offset);
	sm_config_set_in_pins(&c, pin);
	sm_config_set_jmp_pin(&c, pin);
	sm_config_set_in_shift(&c, false, false, 32u);
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);
	float div = (float)clock_get_hz(clk_sys) / (14.0f * max_step_rate);
	sm_config_set_clkdiv(&c, div);
	pio_sm_init(pio, sm, offset, &c);
	pio_set_irq0_source_enabled(pio, pis_sm0_rx_fifo_not_empty + sm, true);
	pio_sm_set_enabled(pio, sm, true);
	pio_sm_put(pio, sm, 1);
}

#endif

