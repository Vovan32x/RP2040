// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// nec_receive //
// ----------- //

#define nec_receive_wrap_target 0
#define nec_receive_wrap 8

static const uint16_t nec_receive_program_instructions[] = {
            //     .wrap_target
    0xe03e, //  0: set    x, 30                      
    0x2020, //  1: wait   0 pin, 0                   
    0x00c7, //  2: jmp    pin, 7                     
    0x0042, //  3: jmp    x--, 2                     
    0xa0c3, //  4: mov    isr, null                  
    0x20a0, //  5: wait   1 pin, 0                   
    0x0000, //  6: jmp    0                          
    0xae42, //  7: nop                           [14]
    0x4001, //  8: in     pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program nec_receive_program = {
    .instructions = nec_receive_program_instructions,
    .length = 9,
    .origin = 0,
};

static inline pio_sm_config nec_receive_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + nec_receive_wrap_target, offset + nec_receive_wrap);
    return c;
}

#include "hardware/clocks.h"
#include "hardware/gpio.h"

#define NEC_RECEIVE_PIO pio1
#define NEC_RECEIVE_PIO_SM 0

/*!
 *
 * @param pio
 * @param sm
 * @param pin
 */
static inline void nec_receive_program_init(PIO pio, uint sm, uint pin) {
	uint offset = pio_add_program(pio, &nec_receive_program);
	gpio_set_pulls(pin, true, false);
	gpio_set_function(pin, (pio == pio0) ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_sm_config c = nec_receive_program_get_default_config(offset);
    sm_config_set_in_shift(&c, true, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_jmp_pin(&c, pin);
    float div = (float)clock_get_hz(clk_sys) / (10.0f / 562.5e-6f);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_set_irq0_source_enabled(pio, pis_sm0_rx_fifo_not_empty + sm, true);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

